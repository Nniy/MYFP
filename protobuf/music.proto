syntax = "proto3";

package lark;

message NoteSequence {
    // Unique id.
    string id = 1;

    // The path of the file.
    string filename = 2;

    // The unique id to differenciate mutiple pieces taken from the same file.
    int64 refrence_number = 3;

    // The collection from which the file comes.
    string collection_name = 4;

    // MIDI resolution, a default of 220 is made by pretty_midi.
    int64 ticks_per_quarter = 5;

    // MIDI time signature, a default of 4/4 is assumed.
    repeated TimeSignature time_signatures = 6;

    // MIDI key signature, a default of C Major is assumed.
    repeated KeySignature key_signatures = 7;

    // MIDI tempo change, a default of 120 is assumed.
    repeated Tempo tempos = 8;

    // A Note combines a MIDI NoteOn and NoteOff into one event with duration.
    repeated Note notes = 9;

    // Total time of the Sequence in seconds.
    double total_time = 10;

    // Total time of Seuqence in quantized steps.
    int64 total_quantized_steps = 11;

    // MIDI specific events, pitch bend.
    repeated PitchBend picth_bends = 12;

    // MIDI sepecifc events, control change.
    repeated ControlChange control_change = 13;

    repeated PartInfo part_infos = 14;

    SourceInfo source_info = 15;

    repeated TextAnnotation text_annotations = 16;

    repeated SectionAnnotation section_annotations = 17;

    repeated SectionGroup section_groups = 18;

    QuantizationInfo quantization_info = 19;

    SubsequenceInfo subsequence_info = 20;

    SequenceMetadata sequence_metadata = 21;


    message TimeSignature {
        double time = 1;
        int32 numerator = 2;
        int32 denominator = 3;
    }

    message KeySignature {
        double time = 1;
        Key key = 2;
        Mode mode = 3;

        enum Key {
            option allow_alias = true;
            C = 0;
            C_SHARP = 1;
            D_FLAT = 1;
            D = 2;
            D_SHARP = 3;
            E_FLAT = 3;
            E = 4;
            F = 5;
            F_SHARP = 6;
            G_FLAT = 6;
            G = 7;
            G_SHARP = 8;
            A_FLAT = 8;
            A = 9;
            A_SHARP = 10;
            B_FLAT = 10;
            B = 11;
        }
        enum Mode {
            MAJOR = 0;
            MINOR = 1;
            NOT_SPECIFIED = 2;
            MIXOLYDIAN = 3;
            DORIAN = 4;
            PHRYGIAN = 5;
            LYDIAN = 6;
            LOCRIAN = 7;
        }
    }

    message Tempo {
        double time = 1;
        double qpm = 2;
    }

    message Note {
        int32 pitch = 1;
        PitchName pitch_name = 2;
        int32 velocity = 3;
        double start_time = 4;
        int64 quantized_start_step = 5;
        double end_time = 6;
        int64 quantized_end_step = 7;
        int32 numerator = 8;
        int32 denominator = 9;
        int32 instrument = 10;
        int32 program = 11;
        bool is_drum = 12;
        int32 part = 13;
        int32 voice = 14;
    }

    enum PitchName {
        UNKNOWN_PITCH_NAME = 0;
        F_FLAT_FLAT = 1;
        C_FLAT_FLAT = 2;
        G_FLAT_FLAT = 3;
        D_FLAT_FLAT = 4;
        A_FLAT_FLAT = 5;
        E_FLAT_FLAT = 6;
        B_FLAT_FLAT = 7;
        F_FLAT = 8;
        C_FLAT = 9;
        G_FLAT = 10;
        D_FLAT = 11;
        A_FLAT = 12;
        E_FLAT = 13;
        B_FLAT = 14;
        F = 15;
        C = 16;
        G = 17;
        D = 18;
        A = 19;
        E = 20;
        B = 21;
        F_SHARP = 22;
        C_SHARP = 23;
        G_SHARP = 24;
        D_SHARP = 25;
        A_SHARP = 26;
        E_SHARP = 27;
        B_SHARP = 28;
        F_SHARP_SHARP = 29;
        C_SHARP_SHARP = 30;
        G_SHARP_SHARP = 31;
        D_SHARP_SHARP = 32;
        A_SHARP_SHARP = 33;
        E_SHARP_SHARP = 34;
        B_SHARP_SHARP = 35;
    }

    message PitchBend {
        double time = 1;
        int32 bend = 2;
        int32 instrument = 3;
        int32 program = 4;
        bool is_drum = 5;
    }

    message ControlChange {
        double time = 1;
        int64 quantized_step = 2;
        int32 control_number = 3;
        int32 control_value = 4;
        int32 instrument = 5;
        int32 program = 6;
        bool is_drum = 7;
    }
    message PartInfo {
        int32 part = 1;
        string name = 2;
    }

    message SourceInfo {
        SourceType source_type = 1;
        EncodingType encoding_type = 2;
        Parser parser = 3;
        enum SourceType {
            UNKNOWN_SOURCE_TYPE = 0;
            SCORE_BASED = 1;
            PERFORMANCE_BASED = 2;
        }

        enum EncodingType {
            UNKNOWN_ENCODING_TYPE = 0;
            MUSIC_XML = 1;
            ABC = 2;
            MIDI = 3;
            MUSICNET = 4;
        }

        enum Parser {
            UNKNOWN_PARSER = 0;
            MUSIC21 = 1;
            PRETTY_MIDI = 2;
            MAGENTA_MUSIC_XML = 3;
            MAGENTA_MUSICNET = 4;
            MAGENTA_ABC = 5;
        }
    }

    message TextAnnotation {
        double time = 1;
        int64 quantized_step = 4;
        string text = 2;
        TextAnnotationType annotation_type = 3;

        enum TextAnnotationType {
            UNKNOWN = 0;
            CHORD_SYMBOL = 1;
        }
    }

    message QuantizationInfo {
        oneof resolution {
            int32 steps_per_quarter = 1;
            int32 steps_per_second = 2;
        }
    }

    message SubsequenceInfo {
        double start_time_offset = 1;
        double end_time_offset = 2;
    }

    message SectionAnnotation {
        double time = 1;
        int64 section_id = 4;
    }

    message Section {
        oneof section_type {
            int64 section_id = 1;
            SectionGroup section_group = 2;
        }
    }

    message SectionGroup {
        repeated Section sections = 1;
        int32 num_times = 2;
    }

    message SequenceMetadata {
        string title = 1;
        string artist = 2;
        repeated string genre = 3;
        repeated string composers = 4;
    }
}

//protoc -I=/Users/Zongyu/Desktop/MYFP/protobuf --python_out=/Users/Zongyu/Desktop/MYFP/protobuf /Users/Zongyu/Desktop/MYFP/protobuf/music.proto
